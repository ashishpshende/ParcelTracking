{"version":3,"file":"src_app_pages_public_reset-password_reset-password_module_ts.js","mappings":"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","sources":["./src/app/pages/public/reset-password/reset-password-routing.module.ts","./src/app/pages/public/reset-password/reset-password.module.ts","./src/app/pages/public/reset-password/reset-password.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { ResetPasswordPage } from './reset-password.page';\r\n\r\nconst routes: Routes = [\r\n  {\r\n    path: '',\r\n    component: ResetPasswordPage\r\n  }\r\n];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forChild(routes)],\r\n  exports: [RouterModule],\r\n})\r\nexport class ResetPasswordPageRoutingModule {}\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\n\r\nimport { IonicModule } from '@ionic/angular';\r\n\r\nimport { ResetPasswordPageRoutingModule } from './reset-password-routing.module';\r\n\r\nimport { ResetPasswordPage } from './reset-password.page';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { SharedModule } from 'src/app/shared/shared/shared.module';\r\n\r\n@NgModule({\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    IonicModule,\r\n    ReactiveFormsModule,\r\n    SharedModule,\r\n    TranslateModule.forChild(),\r\n    ResetPasswordPageRoutingModule\r\n  ],\r\n  declarations: [ResetPasswordPage]\r\n})\r\nexport class ResetPasswordPageModule {}\r\n","/* eslint-disable max-len */\r\nimport { AfterViewInit, Component, OnInit } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, NavigationExtras, Router } from '@angular/router';\r\nimport { NavController, LoadingController, AlertController } from '@ionic/angular';\r\nimport { HelperService } from 'src/app/services/helpers/helper-service';\r\nimport { LanguageService } from 'src/app/services/language/language.service';\r\nimport { UserService } from 'src/app/services/user/user.service';\r\n\r\n@Component({\r\n  selector: 'app-reset-password',\r\n  templateUrl: './reset-password.page.html',\r\n  styleUrls: ['./reset-password.page.scss'],\r\n})\r\nexport class ResetPasswordPage implements OnInit,AfterViewInit {\r\n  public showPasswordStrengthMessage: Boolean;\r\n  public onForgotPasswordForm: FormGroup;\r\n  public showOldPasswordValidationMessage: Boolean;\r\n  public showNewPasswordValidationMessage: Boolean;\r\n  public showConfirmPasswordValidationMessage: Boolean;\r\n  public email: string;\r\n  public oldPasswordValidationMessage: string;\r\n  public newPasswordValidationMessage: string;\r\n  public confirmPasswordValidationMessage: string;\r\n  public oldPassword: string;\r\n  public newPassword: string;\r\n  public confirmPassword: string;\r\n  public passwordStrength: number;\r\n  public passwordResetStatus: boolean;\r\n  loading: any;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private activatedRoute:ActivatedRoute,\r\n    private languageService: LanguageService,\r\n    public loadingController: LoadingController,\r\n    public userService: UserService,\r\n    public alertController: AlertController,\r\n  ) {\r\n    this.passwordResetStatus = false;\r\n    this.showPasswordStrengthMessage = true;\r\n    this.passwordStrength = 0;\r\n  }\r\n  ngAfterViewInit(): void {\r\n    this.email = '';//\"ashishhende@gmail.com\";\r\n    this.oldPassword =  '';//\"password\";\r\n    this.newPassword =  '';//\"Password1\";\r\n    this.confirmPassword =  '';//\"Password1\";\r\n    this.activatedRoute.queryParams.subscribe(params => {\r\n      this.email = params['email'];\r\n\r\n    });\r\n  }\r\n  newPasswordTextChanged() {\r\n\r\n    if (this.newPassword.length == 0) {\r\n      this.showNewPasswordValidationMessage = false;\r\n      this.showPasswordStrengthMessage =true;\r\n      return;\r\n    }\r\n    else\r\n    {\r\n      this.showPasswordStrengthMessage =false;\r\n    }\r\n\r\n    this.passwordStrength = HelperService.getPasswordStrength(this.newPassword);\r\n    if (this.passwordStrength == -1) {\r\n      this.showNewPasswordValidationMessage = true;\r\n      this.newPasswordValidationMessage = this.languageService.translate('RESET_PASSWORD.PASSWORD_LENGTH_MESSAGE').replace('{MIN_PASSWORD_STRENGTH}', '8');\r\n    }\r\n    else {\r\n      if (this.passwordStrength < 1) {\r\n        this.showNewPasswordValidationMessage = true;\r\n        this.newPasswordValidationMessage = this.languageService.translate('RESET_PASSWORD.NEW_PASSWORD_STRENGTH_MESSAGE');\r\n      }\r\n      else {\r\n        this.showNewPasswordValidationMessage = false;\r\n      }\r\n    }\r\n    console.log(this.passwordStrength);\r\n  }\r\n  async ngOnInit() {\r\n\r\n  }\r\n  validate() {\r\n    var isValid = true;\r\n    if (this.oldPassword == '') {\r\n      this.showOldPasswordValidationMessage = true;\r\n      this.oldPasswordValidationMessage = this.languageService.translate('RESET_PASSWORD.EMPTY_DETAILS_ERROR_TITLE');\r\n      isValid = false;\r\n    }\r\n    if (this.newPassword == '') {\r\n      this.showNewPasswordValidationMessage = true;\r\n      this.newPasswordValidationMessage = this.languageService.translate('RESET_PASSWORD.EMPTY_DETAILS_ERROR_TITLE');\r\n      isValid = false;\r\n    }\r\n    if (this.confirmPassword == '') {\r\n      this.showConfirmPasswordValidationMessage = true;\r\n      this.confirmPasswordValidationMessage = this.languageService.translate('RESET_PASSWORD.EMPTY_DETAILS_ERROR_TITLE');\r\n      isValid = false;\r\n    }\r\n    if (this.oldPassword === this.newPassword) {\r\n      this.showConfirmPasswordValidationMessage = true;\r\n      this.confirmPasswordValidationMessage = this.languageService.translate('RESET_PASSWORD.CONFIRM_NEW_PASSWORD_MESSAGE');\r\n      isValid = false;\r\n    }\r\n    if (this.confirmPassword !== this.newPassword) {\r\n      this.showConfirmPasswordValidationMessage = true;\r\n      this.confirmPasswordValidationMessage = this.languageService.translate('RESET_PASSWORD.PASSWORD_NOT_MATCHING_ERROR_MESSAGE');\r\n      isValid = false;\r\n    }\r\n    return isValid;\r\n  }\r\n\r\n\r\n  languageLinkClicked() {\r\n    this.languageService.presentLanguageSelctionMenu(changed=>{});\r\n  }\r\n\r\n  cancelButtonClicked() {\r\n    let navigationExtras: NavigationExtras = {\r\n      queryParams: {\r\n        ts: new Date().getTime()\r\n      }\r\n    };\r\n    this.router.navigate([this.userService.lastRoute],navigationExtras)\r\n  }\r\n  async resetButtonClicked() {\r\n    this.confirmPasswordValidationMessage = '';\r\n    if (this.validate()) {\r\n\r\n      this.loading = await this.loadingController.create({\r\n        message: this.languageService.translate('RESET_PASSWORD.PROGRESS_MESSAGE'),\r\n        duration: 10000,\r\n      });\r\n      this.loading.present();\r\n      this.userService.checkUser(this.email, this.oldPassword, response => {\r\n\r\n        this.userService.ResetPassword(response.rowIndex, this.newPassword, response => {\r\n          this.loading.dismiss();\r\n          this.passwordResetStatus = true;\r\n          this.presentAlert(this.languageService.translate('RESET_PASSWORD.SUCCESS'), this.languageService.translate('RESET_PASSWORD.SUCCESS_MESSAGE'));\r\n\r\n        }, failure => {\r\n          this.loading.dismiss();\r\n          this.presentAlert(this.languageService.translate('RESET_PASSWORD.FAILED'), this.languageService.translate('RESET_PASSWORD.FAILED_MESSAGE'));\r\n        });\r\n\r\n      },\r\n        failure => {\r\n          this.loading.dismiss();\r\n          switch (failure) {\r\n            case 'INVALID_CREDENTAILS':\r\n              this.presentAlert(this.languageService.translate('RESET_PASSWORD.INVALID_CREDENTIALS_ERROR_TITLE'),this.languageService.translate('RESET_PASSWORD.ERROR_INVALID_CREDENTIALS_MESSAGE'));\r\n              break;\r\n            case 'INACTIVE_USER':\r\n              this.presentAlert(this.languageService.translate('RESET_PASSWORD.INACTIVE_ACCOUNT_ERROR_TITLE'),this.languageService.translate('RESET_PASSWORD.ERROR_INACTIVE_ACCOUNT_MESSAGE'));\r\n              break;\r\n            case 'SUSPENDED_USER':\r\n              this.presentAlert(this.languageService.translate('RESET_PASSWORD.SUSPENDED_ACCOUNT_ERROR_TITLE'),this.languageService.translate('RESET_PASSWORD.ERROR_SUSPENDED_ACCOUNT_MESSAGE'));\r\n              break;\r\n            case 'RESET_REQUIRED':\r\n              this.presentAlert(this.languageService.translate('RESET_PASSWORD.PASSWORD_RESET_REQUIRED_ERROR_TITLE'),this.languageService.translate('RESET_PASSWORD.PASSWORD_RESET_REQUIRED_ACCOUNT_MESSAGE'));\r\n              break;\r\n          }\r\n\r\n\r\n        });\r\n\r\n    }\r\n  }\r\n\r\n  async presentLoading(loading) {\r\n    await loading.present();\r\n  }\r\n\r\n  //Alerts\r\n  async presentAlert(headerTitle = this.languageService.translate('RESET_PASSWORD.FAILED'), message = this.languageService.translate('RESET_PASSWORD.FAILED_MESSAGE')) {\r\n    const alert = await this.alertController.create({\r\n      cssClass: 'my-custom-class',\r\n      header: headerTitle,\r\n      subHeader: '',\r\n      message: message,\r\n      buttons: [\r\n        {\r\n          text: this.languageService.translate('BUTTONS.OK'),\r\n          handler: data => {\r\n            if(this.passwordResetStatus)\r\n            {\r\n              let navigationExtras: NavigationExtras = {\r\n                queryParams: {\r\n                  ts: new Date().getTime()\r\n                }\r\n              };\r\n              this.router.navigate(['/login'],navigationExtras)\r\n            }\r\n\r\n          }\r\n        }]\r\n    });\r\n\r\n    await alert.present();\r\n\r\n    const { role } = await alert.onDidDismiss();\r\n  }\r\n}\r\n"],"names":["Component","ActivatedRoute","Router","LoadingController","AlertController","HelperService","LanguageService","UserService","ResetPasswordPage","constructor","router","activatedRoute","languageService","loadingController","userService","alertController","passwordResetStatus","showPasswordStrengthMessage","passwordStrength","ngAfterViewInit","email","oldPassword","newPassword","confirmPassword","queryParams","subscribe","params","newPasswordTextChanged","length","showNewPasswordValidationMessage","getPasswordStrength","newPasswordValidationMessage","translate","replace","console","log","ngOnInit","validate","isValid","showOldPasswordValidationMessage","oldPasswordValidationMessage","showConfirmPasswordValidationMessage","confirmPasswordValidationMessage","languageLinkClicked","presentLanguageSelctionMenu","changed","cancelButtonClicked","navigationExtras","ts","Date","getTime","navigate","lastRoute","resetButtonClicked","loading","create","message","duration","present","checkUser","response","ResetPassword","rowIndex","dismiss","presentAlert","failure","presentLoading","headerTitle","alert","cssClass","header","subHeader","buttons","text","handler","data","role","onDidDismiss","selector","template"],"sourceRoot":"webpack:///","x_google_ignoreList":[]}